// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/tiltmod.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// MBM
Rcpp::List MBM(const NumericVector& x, const NumericVector& w, const NumericVector& a0, const NumericVector& a1, const double& precision, const int& MaxIter);
static SEXP _tiltmod_MBM_try(SEXP xSEXP, SEXP wSEXP, SEXP a0SEXP, SEXP a1SEXP, SEXP precisionSEXP, SEXP MaxIterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< const double& >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const int& >::type MaxIter(MaxIterSEXP);
    rcpp_result_gen = Rcpp::wrap(MBM(x, w, a0, a1, precision, MaxIter));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _tiltmod_MBM(SEXP xSEXP, SEXP wSEXP, SEXP a0SEXP, SEXP a1SEXP, SEXP precisionSEXP, SEXP MaxIterSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_tiltmod_MBM_try(xSEXP, wSEXP, a0SEXP, a1SEXP, precisionSEXP, MaxIterSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// UBMM
Rcpp::List UBMM(const NumericVector& x, const NumericVector& w, const NumericVector& a, const double& precision, const int& MaxIter);
static SEXP _tiltmod_UBMM_try(SEXP xSEXP, SEXP wSEXP, SEXP aSEXP, SEXP precisionSEXP, SEXP MaxIterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const int& >::type MaxIter(MaxIterSEXP);
    rcpp_result_gen = Rcpp::wrap(UBMM(x, w, a, precision, MaxIter));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _tiltmod_UBMM(SEXP xSEXP, SEXP wSEXP, SEXP aSEXP, SEXP precisionSEXP, SEXP MaxIterSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_tiltmod_UBMM_try(xSEXP, wSEXP, aSEXP, precisionSEXP, MaxIterSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _tiltmod_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::List(*MBM)(const NumericVector&,const NumericVector&,const NumericVector&,const NumericVector&,const double&,const int&)");
        signatures.insert("Rcpp::List(*UBMM)(const NumericVector&,const NumericVector&,const NumericVector&,const double&,const int&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _tiltmod_RcppExport_registerCCallable() { 
    R_RegisterCCallable("tiltmod", "_tiltmod_MBM", (DL_FUNC)_tiltmod_MBM_try);
    R_RegisterCCallable("tiltmod", "_tiltmod_UBMM", (DL_FUNC)_tiltmod_UBMM_try);
    R_RegisterCCallable("tiltmod", "_tiltmod_RcppExport_validate", (DL_FUNC)_tiltmod_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_tiltmod_MBM", (DL_FUNC) &_tiltmod_MBM, 6},
    {"_tiltmod_UBMM", (DL_FUNC) &_tiltmod_UBMM, 5},
    {"_tiltmod_RcppExport_registerCCallable", (DL_FUNC) &_tiltmod_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_tiltmod(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
